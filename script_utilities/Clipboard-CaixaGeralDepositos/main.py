import pyperclip
import os
from sys import getsizeof

count = 0


class TerminalColors:
    HEADER = '\033[95m'
    OK_BLUE = '\033[94m'
    OK_GREEN = '\033[92m'
    WARNING = '\033[93m'
    FAIL = '\033[91m'
    END_LINE = '\033[0m'
    BOLD = '\033[1m'
    UNDERLINE = '\033[4m'


def messageAndRunScript():
    a = input(f'{TerminalColors.HEADER}Script running...{TerminalColors.END_LINE}\n\nPrima {TerminalColors.WARNING}"Enter"{TerminalColors.END_LINE} para rodar...')
    runScript()


def testAndExecute(func, argument):

    funcName = func.__name__
    print(
        f'{TerminalColors.END_LINE}Start function: {TerminalColors.WARNING}{funcName:.<50}{TerminalColors.END_LINE}', end='')
    try:
        argument = func(argument)
        if argument == False:
            raise
        print(TerminalColors.OK_GREEN +
              f' ==> Done successfully!' + TerminalColors.END_LINE)

        return argument
    except:
        print(TerminalColors.FAIL +
              f' ==> ERROR!!' + TerminalColors.END_LINE)
        messageAndRunScript()


def printFormated(data):
    print(f'{TerminalColors.WARNING}\n\nPrint formatado:\n{TerminalColors.END_LINE}')
    print(data)
    for index, line in enumerate(data):
        print()
        for position, value in enumerate(data[index]):
            print(f'posicao[{index}][{position}] --> "{value}"')


def printWithoutFormat(data):
    if data == None:
        print(
            f'\n\n{TerminalColors.FAIL}{"   Algo de errado não deu certo =(   ":*^66}{TerminalColors.END_LINE}')
    else:
        print(
            f'\n*************** Conteúdo do Clipboard: ****************\n{TerminalColors.OK_GREEN}{data}{TerminalColors.END_LINE}')
        print('*' * 55)


def getData(data):
    data = pyperclip.paste()
    return data


def dataIsTable(data):
    if getsizeof(data) < 50:
        return False
    return data


def transformDataInListOfListes(data):
    data = data.upper().split('\r\n')
    data = [individualData.strip() for individualData in data]
    data = [individualData.split('\t') for individualData in data]
    data2 = []
    for item in data:
        if item != ['']:
            data2.append(item)
    data = data2
    for indexDatas, datas in enumerate(data):
        for indexElement, value in enumerate(data[indexDatas]):
            data[indexDatas][indexElement] = value.strip()
    return data


def addNegativeSignalToDebitNumber(data):
    for indexDatas, datas in enumerate(data):
        if data[indexDatas][2] not in '':
            data[indexDatas][2] = '-' + data[indexDatas][2]
    return data


def removeEmptyValueOfEveryLists(data):

    for i in range(len(data)):
        data[i] = list(filter(None, data[i]))
    return data


def transformDataInPortugueseFormat(data):
    for i, lines in enumerate(data):
        for j, line in enumerate(data[i]):
            data[i][j] = data[i][j].replace('.', '')
            data[i][j] = data[i][j].replace(',', '.')
    for i, lines in enumerate(data):
        for j, line in enumerate(data[i]):
            data[i][j] = data[i][j].replace('.', ',')
    return data


def deleteSaldoAposMovimento(data):
    for i, lines in enumerate(data):
        for j, line in enumerate(data[i]):
            if j == 4:
                del data[i][j]
    return data


def convertDataToStringWithSintaxForTabAndNewLine(data):
    for lines in data:
        lines.append('\r\n')

    for lines in data:
        for position in range(-2, -8, -2):
            lines.insert(position, '\t')

    dataFinal = ''
    for i, lines in enumerate(data):
        for j, line in enumerate(data[i]):
            dataFinal += data[i][j]
    return dataFinal


def copyNewDataToClipboard(data):
    pyperclip.copy(data)
    return data


def runScript():
    global count
    count += 1
    os.system('cls')
    print(f'{TerminalColors.HEADER}Running for the {TerminalColors.WARNING}{TerminalColors.BOLD}{count}º {TerminalColors.END_LINE}{TerminalColors.HEADER}time...\n\n{TerminalColors.END_LINE}')

    data = testAndExecute(getData, None)
    data = testAndExecute(dataIsTable, data)
    data = testAndExecute(transformDataInListOfListes, data)
    data = testAndExecute(addNegativeSignalToDebitNumber, data)
    data = testAndExecute(removeEmptyValueOfEveryLists, data)
    data = testAndExecute(transformDataInPortugueseFormat, data)
    data = testAndExecute(deleteSaldoAposMovimento, data)
    data = testAndExecute(
        convertDataToStringWithSintaxForTabAndNewLine, data)
    data = testAndExecute(copyNewDataToClipboard, data)
    printWithoutFormat(data)
    messageAndRunScript()


# ====================================================================
# ===================== Início do programa ===========================
# ====================================================================

os.system('cls')
messageAndRunScript()
